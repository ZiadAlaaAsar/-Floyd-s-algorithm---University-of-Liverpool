""" 
Floyd-Warshall algorithm
"""

V = 4
INF = 99999

def floydWarshall(graph):
    """
    Recursive implementation of Floyd Warshall algorithm
    """
    recursive_floydWarshall(graph, 0, 0, 0)
    printSolution(graph)

def recursive_floydWarshall(graph, k, i, j):

    if k == V:
        return
    if i == V:
        return recursive_floydWarshall(graph, k + 1, 0, 0)
    if j == V:
        return recursive_floydWarshall(graph, k, i + 1, 0)

    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

    recursive_floydWarshall(graph, k, i, j + 1)


def printSolution(graph):
    print("\n Following matrix shows the shortest graphances between every pair of vertices \n")

    for i in range(V):
        if i == 0:
            print("%3s" % " ", end=" ")

        print("%7s\t" % i, end=" ")
    print()
    print("%3s" % "-", end=" ")
    for i in range(V * 7):
        print("-", end=" ")
    print()

    for i in range(V):
        for j in range(V):
            if j == 0:
                print(i, "|", end=" ")

            if graph[i][j] == INF:
                print("%7s\t" % ("INF"), end=" ")
            else:
                print("%7s\t" % (graph[i][j]), end=' ')
            if j == V - 1:
                print()

# Driver's code
if __name__ == "__main__":
    graph = [[0, 5, INF, 10],
             [INF, 0, 3, INF],
             [INF, INF, 0, 1],
             [INF, INF, INF, 0]]

    graph2 = [[0, 7, INF, 8],
            [INF, 0, 5, INF],
            [INF, INF, 0, 2],
            [INF, INF, INF, 0]]

    floydWarshall(graph2)